# quantum_horizon_explorer.py
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button
from quantum_hypercube import QuantumHypercube
import time

class QuantumHorizonExplorer:
    def __init__(self):
        self.fig, self.ax = plt.subplots(figsize=(14, 10))
        plt.subplots_adjust(bottom=0.4)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–∫—É–±–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        self.dimensions = {'x': (-5, 5), 'y': (-5, 5), 't': (0, 10)}
        self.cube = QuantumHypercube(self.dimensions, resolution=64)
        self.current_law = "sin(x)*cos(y)*exp(-t/5)"
        self.cube.define_physical_law(self.current_law)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_controls()
        self.update_visualization()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        self.horizon_level = 1.0
        self.entanglement_factor = 0.7
        self.discovery_log = []
        
        plt.show()
    
    def setup_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –°–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        ax_slider = plt.axes([0.25, 0.25, 0.65, 0.03])
        self.slider = Slider(
            ax_slider, '–ì–æ—Ä–∏–∑–æ–Ω—Ç', 0.1, 5.0, 
            valinit=self.horizon_level, valstep=0.1
        )
        self.slider.on_changed(self.update_horizon)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏–π
        ax_quantum = plt.axes([0.25, 0.15, 0.2, 0.05])
        self.btn_quantum = Button(ax_quantum, '–ö–≤–∞–Ω—Ç–æ–≤—ã–π —Å–∫–∞—á–æ–∫')
        self.btn_quantum.on_clicked(self.quantum_leap)
        
        ax_fractal = plt.axes([0.45, 0.15, 0.2, 0.05])
        self.btn_fractal = Button(ax_fractal, '–§—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥')
        self.btn_fractal.on_clicked(self.fractal_transition)
        
        ax_multiverse = plt.axes([0.65, 0.15, 0.2, 0.05])
        self.btn_multiverse = Button(ax_multiverse, '–ú—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–∞—è')
        self.btn_multiverse.on_clicked(self.multiverse_jump)
        
        # –ü–æ–ª–µ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
        self.log_text = self.fig.text(
            0.05, 0.05, 
            "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è...\n",
            fontsize=10, 
            verticalalignment='bottom'
        )
    
    def update_visualization(self, t=2.5):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.ax.clear()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        x = np.linspace(-5, 5, 100)
        y = np.linspace(-5, 5, 100)
        X, Y = np.meshgrid(x, y)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        values = np.zeros_like(X)
        for i in range(X.shape[0]):
            for j in range(X.shape[1]):
                values[i, j] = self.cube.query([X[i, j], Y[i, j], t])
        
        # –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
        im = self.ax.imshow(
            values, 
            extent=[-5, 5, -5, 5],
            origin='lower', 
            cmap='plasma',
            alpha=0.8 + 0.2 * np.sin(time.time())
        )
        
        # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        quantum_effect = self.horizon_level * np.random.randn(*values.shape)
        contour = self.ax.contour(
            X, Y, values + quantum_effect, 
            levels=10, colors='white', linewidths=0.7
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        self.ax.set_title(
            f"–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ì–æ—Ä–∏–∑–æ–Ω—Ç v4.1\n–ó–∞–∫–æ–Ω: {self.current_law}",
            fontsize=14,
            color='cyan'
        )
        self.ax.set_xlabel('–ò–∑–º–µ—Ä–µ–Ω–∏–µ X', fontsize=12)
        self.ax.set_ylabel('–ò–∑–º–µ—Ä–µ–Ω–∏–µ Y', fontsize=12)
        
        # –≠—Ñ—Ñ–µ–∫—Ç—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
        self.ax.grid(True, alpha=0.3, linestyle='--')
        self.fig.canvas.draw_idle()
    
    def update_horizon(self, val):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
        self.horizon_level = val
        self.add_log(f"–ì–æ—Ä–∏–∑–æ–Ω—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {val:.1f}")
        self.update_visualization()
    
    def quantum_leap(self, event):
        """–ö–≤–∞–Ω—Ç–æ–≤—ã–π —Å–∫–∞—á–æ–∫ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        new_law = self.generate_quantum_law()
        self.cube.define_physical_law(new_law)
        self.current_law = new_law
        
        self.add_log(f"–ö–í–ê–ù–¢–û–í–´–ô –°–ö–ê–ß–û–ö!\n–ù–æ–≤—ã–π –∑–∞–∫–æ–Ω: {new_law}")
        self.update_visualization()
    
    def fractal_transition(self, event):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"""
        self.entanglement_factor = min(1.0, self.entanglement_factor + 0.1)
        self.add_log(f"–§–†–ê–ö–¢–ê–õ–¨–ù–´–ô –ü–ï–†–ï–•–û–î\n–£—Ä–æ–≤–µ–Ω—å –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {self.entanglement_factor:.1f}")
        
        # –°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç
        for _ in range(10):
            self.horizon_level += 0.1
            self.slider.set_val(self.horizon_level)
            plt.pause(0.05)
        
        self.update_visualization()
    
    def multiverse_jump(self, event):
        """–ü—Ä—ã–∂–æ–∫ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é"""
        self.add_log("–ê–ö–¢–ò–í–ê–¶–ò–Ø –ú–£–õ–¨–¢–ò–í–°–ï–õ–ï–ù–ù–û–ô")
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
        for i in range(5):
            self.ax.set_facecolor(plt.cm.viridis(i/5))
            self.fig.canvas.draw_idle()
            plt.pause(0.2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        new_dims = {dim: (self.dimensions[dim][0] * np.random.uniform(0.8, 1.2), 
                     self.dimensions[dim][1] * np.random.uniform(0.8, 1.2)) 
                    for dim in self.dimensions}
        
        self.dimensions = new_dims
        self.cube = QuantumHypercube(self.dimensions, resolution=64)
        self.quantum_leap(event)
        
        self.add_log("–ü–ï–†–ï–•–û–î –í –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ –†–ï–ê–õ–¨–ù–û–°–¢–¨ –ó–ê–í–ï–†–®–Å–ù!")
    
    def generate_quantum_law(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–∞"""
        components = [
            'sin', 'cos', 'exp', 'log', 'sqrt',
            'x', 'y', 't', 'x*y', 'x**2', 'y**2', 't**2',
            'x+y', 'x-y', 'x*t', 'y*t', 'pi'
        ]
        
        law = ""
        for _ in range(3 + int(self.horizon_level)):
            component = np.random.choice(components)
            operation = np.random.choice(['*', '+', '-', '/'])
            
            if law and not law.endswith('('):
                law += operation
                
            if component in ['sin', 'cos', 'exp', 'log', 'sqrt']:
                arg = np.random.choice(['x', 'y', 't', f'({np.random.choice(components)})'])
                law += f"{component}({arg})"
            else:
                law += component
        
        # –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if law.startswith('*') or law.startswith('/'):
            law = law[1:]
        
        return law[:80]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    
    def add_log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç–∏–π"""
        timestamp = time.strftime("%H:%M:%S")
        self.discovery_log.append(f"[{timestamp}] {message}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
        log_text = "\n".join(self.discovery_log[-4:])
        self.log_text.set_text(log_text)

if __name__ == "__main__":
    print("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ö–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è...")
    print("–ì–æ—Ç–æ–≤ –∫ –ø–æ–∫–æ—Ä–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤! üåå")
    explorer = QuantumHorizonExplorer()
